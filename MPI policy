function MPI(P0, R0, P1, R1, beta)

#Calculate expected reward for each state
R0_set = zeros(5)
R1_set = zeros(5)

for i in 1:5
    for j in 1:5
        R0_set[i] += P0[i,j] * R0[i,j]
    end
end

for i in 1:5
    for j in 1:5
        R1_set[i] += P1[i,j] * R1[i,j]
    end
end
    
#Now we try to compute the work metric seperately.
    
    # threshold z = 0, active all
A = [1-beta*P1[1,1] -beta*P1[1,2]  -beta*P1[1,3]  -beta*P1[1,4]  -beta*P1[1,5];
     -beta*P1[2,1]  1-beta*P1[2,2] -beta*P1[2,3]  -beta*P1[2,4]  -beta*P1[2,5];
     -beta*P1[3,1]  -beta*P1[3,2]  1-beta*P1[3,3] -beta*P1[3,4]  -beta*P1[3,5];
     -beta*P1[4,1]  -beta*P1[4,2]  -beta*P1[4,3]  1-beta*P1[4,4] -beta*P1[4,5];
     -beta*P1[5,1]  -beta*P1[5,2]  -beta*P1[5,3]  -beta*P1[5,4]  1-beta*P1[5,5] ]  

B = [1;1;1;1;1]

G_vector_0 = A \ B

    # threshold z = 1, active 2,3,4,5

A = [1-beta*P0[1,1]  -beta*P0[1,2]   -beta*P0[1,3]    -beta*P0[1,4]    -beta*P0[1,5];
     -beta*P1[2,1]   1-beta*P1[2,2]  -beta*P1[2,3]    -beta*P1[2,4]    -beta*P1[2,5];
     -beta*P1[3,1]   -beta*P1[3,2]   1-beta*P1[3,3]  -beta*P1[3,4]    -beta*P1[3,5];
     -beta*P1[4,1]   -beta*P1[4,2]   -beta*P1[4,3]    1-beta*P1[4,4]  -beta*P1[4,5];
     -beta*P1[5,1]   -beta*P1[5,2]   -beta*P1[5,3]    -beta*P1[5,4]   1-beta*P1[5,5]]

B =  [0;1;1;1;1]

G_vector_1 = A \ B

    # threshold z = 2, active 3,4,5

A = [1-beta*P0[1,1] -beta*P0[1,2]  -beta*P0[1,3]   -beta*P0[1,4]   -beta*P0[1,5];
     -beta*P0[2,1]  1-beta*P0[2,2] -beta*P0[2,3]   -beta*P0[2,4]   -beta*P0[2,5];
     -beta*P1[3,1]  -beta*P1[3,2]  1-beta*P1[3,3]  -beta*P1[3,4]   -beta*P1[3,5];
     -beta*P1[4,1]  -beta*P1[4,2]  -beta*P1[4,3]   1-beta*P1[4,4]  -beta*P1[4,5];
     -beta*P1[5,1]  -beta*P1[5,2]  -beta*P1[5,3]   -beta*P1[5,4]   1-beta*P1[5,5]]  

B = [0;0;1;1;1]

G_vector_2 = A \ B

    # threshold z = 3, active 4,5

A = [1-beta*P0[1,1] -beta*P0[1,2]  -beta*P0[1,3]   -beta*P0[1,4]   -beta*P0[1,5];
     -beta*P0[2,1]  1-beta*P0[2,2] -beta*P0[2,3]   -beta*P0[2,4]   -beta*P0[2,5];
     -beta*P0[3,1]  -beta*P0[3,2]  1-beta*P0[3,3]  -beta*P0[3,4]   -beta*P0[3,5];
     -beta*P1[4,1]  -beta*P1[4,2]  -beta*P1[4,3]   1-beta*P1[4,4]  -beta*P1[4,5];
     -beta*P1[5,1]  -beta*P1[5,2]  -beta*P1[5,3]   -beta*P1[5,4]   1-beta*P1[5,5]]  

B = [0;0;0;1;1]

G_vector_3 = A \ B

    # threshold z = 4, active 5

A = [1-beta*P0[1,1] -beta*P0[1,2]  -beta*P0[1,3]   -beta*P0[1,4]   -beta*P0[1,5];
     -beta*P0[2,1]  1-beta*P0[2,2] -beta*P0[2,3]   -beta*P0[2,4]   -beta*P0[2,5];
     -beta*P0[3,1]  -beta*P0[3,2]  1-beta*P0[3,3]  -beta*P0[3,4]   -beta*P0[3,5];
     -beta*P0[4,1]  -beta*P0[4,2]  -beta*P0[4,3]   1-beta*P0[4,4]  -beta*P0[4,5];
     -beta*P1[5,1]  -beta*P1[5,2]  -beta*P1[5,3]   -beta*P1[5,4]   1-beta*P1[5,5]]  

B = [0;0;0;0;1]

G_vector_4 = A \ B

    # threshold z = 5, no active

A = [1-beta*P0[1,1] -beta*P0[1,2]  -beta*P0[1,3]   -beta*P0[1,4]   -beta*P0[1,5];
     -beta*P0[2,1]  1-beta*P0[2,2] -beta*P0[2,3]   -beta*P0[2,4]   -beta*P0[2,5];
     -beta*P0[3,1]  -beta*P0[3,2]  1-beta*P0[3,3]  -beta*P0[3,4]   -beta*P0[3,5];
     -beta*P0[4,1]  -beta*P0[4,2]  -beta*P0[4,3]   1-beta*P0[4,4]  -beta*P0[4,5];
     -beta*P0[5,1]  -beta*P0[5,2]  -beta*P0[5,3]   -beta*P0[5,4]   1-beta*P0[5,5]]  

B = [0;0;0;0;0]

G_vector_5 = A \ B


    G_vector = hcat(G_vector_0, G_vector_1, G_vector_2, G_vector_3, G_vector_4, G_vector_5)
    marginal_G_vector = zeros(5, 6)


    #check PCLI1
#Calculate marginal work metric for each state 1,2,3,4,5 and threshold 0,1,2,3,4,5
    
for i in 1:5
    for j in 0:5
        g_ij = 1 + beta * (P1[i,1] * G_vector[1,j+1] + P1[i,2] * G_vector[2,j+1] + 
            P1[i,3] * G_vector[3,j+1] + P1[i,4] * G_vector[4,j+1] + P1[i,5] * 
            G_vector[5,j+1]) - beta * (P0[i,1] * G_vector[1,j+1] + P0[i,2] * 
            G_vector[2,j+1] + P0[i,3] * G_vector[3,j+1] + P0[i,4] 
            * G_vector[4,j+1] + P0[i,5] * G_vector[5,j+1])
        marginal_G_vector[i, j+1] = g_ij
    end
end

# Display the result matrix

# for i = 1:5
#    println(marginal_G_vector[i, :])
# end
    

# check if all work metric positive
all_positive = true

for i = 1:size(marginal_G_vector, 1)
    for j = 1:size(marginal_G_vector, 2)

        if marginal_G_vector[i, j] <= 0
            
            all_positive = false
            break
        end
    end
end


if all_positive
    println("Pass 1st check")
end

    # If so, now compute reward metric.
    
    # threshold z = 0, active all
A = [1-beta*P1[1,1] -beta*P1[1,2]  -beta*P1[1,3]  -beta*P1[1,4]  -beta*P1[1,5];
     -beta*P1[2,1]  1-beta*P1[2,2] -beta*P1[2,3]  -beta*P1[2,4]  -beta*P1[2,5];
     -beta*P1[3,1]  -beta*P1[3,2]  1-beta*P1[3,3] -beta*P1[3,4]  -beta*P1[3,5];
     -beta*P1[4,1]  -beta*P1[4,2]  -beta*P1[4,3]  1-beta*P1[4,4] -beta*P1[4,5];
     -beta*P1[5,1]  -beta*P1[5,2]  -beta*P1[5,3]  -beta*P1[5,4]  1-beta*P1[5,5] ]  

B = [R1_set[1]; R1_set[2]; R1_set[3]; R1_set[4]; R1_set[5]]

F_vector_0 = A \ B

# threshold z = 1, active 2,3,4,5

A = [1-beta*P0[1,1]  -beta*P0[1,2]   -beta*P0[1,3]    -beta*P0[1,4]    -beta*P0[1,5];
     -beta*P1[2,1]   1-beta*P1[2,2]  -beta*P1[2,3]    -beta*P1[2,4]    -beta*P1[2,5];
     -beta*P1[3,1]   -beta*P1[3,2]   1-beta*P1[3,3]  -beta*P1[3,4]    -beta*P1[3,5];
     -beta*P1[4,1]   -beta*P1[4,2]   -beta*P1[4,3]    1-beta*P1[4,4]  -beta*P1[4,5];
     -beta*P1[5,1]   -beta*P1[5,2]   -beta*P1[5,3]    -beta*P1[5,4]   1-beta*P1[5,5]]

B =  [R0_set[1]; R1_set[2]; R1_set[3]; R1_set[4]; R1_set[5]]

F_vector_1 = A \ B

# threshold z = 2, active 3,4,5

A = [1-beta*P0[1,1] -beta*P0[1,2]  -beta*P0[1,3]   -beta*P0[1,4]   -beta*P0[1,5];
     -beta*P0[2,1]  1-beta*P0[2,2] -beta*P0[2,3]   -beta*P0[2,4]   -beta*P0[2,5];
     -beta*P1[3,1]  -beta*P1[3,2]  1-beta*P1[3,3]  -beta*P1[3,4]   -beta*P1[3,5];
     -beta*P1[4,1]  -beta*P1[4,2]  -beta*P1[4,3]   1-beta*P1[4,4]  -beta*P1[4,5];
     -beta*P1[5,1]  -beta*P1[5,2]  -beta*P1[5,3]   -beta*P1[5,4]   1-beta*P1[5,5]]  

B = [R0_set[1]; R0_set[2]; R1_set[3]; R1_set[4]; R1_set[5]]

F_vector_2 = A \ B

# threshold z = 3, active 4,5

A = [1-beta*P0[1,1] -beta*P0[1,2]  -beta*P0[1,3]   -beta*P0[1,4]   -beta*P0[1,5];
     -beta*P0[2,1]  1-beta*P0[2,2] -beta*P0[2,3]   -beta*P0[2,4]   -beta*P0[2,5];
     -beta*P0[3,1]  -beta*P0[3,2]  1-beta*P0[3,3]  -beta*P0[3,4]   -beta*P0[3,5];
     -beta*P1[4,1]  -beta*P1[4,2]  -beta*P1[4,3]   1-beta*P1[4,4]  -beta*P1[4,5];
     -beta*P1[5,1]  -beta*P1[5,2]  -beta*P1[5,3]   -beta*P1[5,4]   1-beta*P1[5,5]]  

B = [R0_set[1]; R0_set[2]; R0_set[3]; R1_set[4]; R1_set[5]]

F_vector_3 = A \ B

# threshold z = 4, active 5

A = [1-beta*P0[1,1] -beta*P0[1,2]  -beta*P0[1,3]   -beta*P0[1,4]   -beta*P0[1,5];
     -beta*P0[2,1]  1-beta*P0[2,2] -beta*P0[2,3]   -beta*P0[2,4]   -beta*P0[2,5];
     -beta*P0[3,1]  -beta*P0[3,2]  1-beta*P0[3,3]  -beta*P0[3,4]   -beta*P0[3,5];
     -beta*P0[4,1]  -beta*P0[4,2]  -beta*P0[4,3]   1-beta*P0[4,4]  -beta*P0[4,5];
     -beta*P1[5,1]  -beta*P1[5,2]  -beta*P1[5,3]   -beta*P1[5,4]   1-beta*P1[5,5]]  

B = [R0_set[1]; R0_set[2]; R0_set[3]; R0_set[4]; R1_set[5]]

F_vector_4 = A \ B

# threshold z = 5, no active

A = [1-beta*P0[1,1] -beta*P0[1,2]  -beta*P0[1,3]   -beta*P0[1,4]   -beta*P0[1,5];
     -beta*P0[2,1]  1-beta*P0[2,2] -beta*P0[2,3]   -beta*P0[2,4]   -beta*P0[2,5];
     -beta*P0[3,1]  -beta*P0[3,2]  1-beta*P0[3,3]  -beta*P0[3,4]   -beta*P0[3,5];
     -beta*P0[4,1]  -beta*P0[4,2]  -beta*P0[4,3]   1-beta*P0[4,4]  -beta*P0[4,5];
     -beta*P0[5,1]  -beta*P0[5,2]  -beta*P0[5,3]   -beta*P0[5,4]   1-beta*P0[5,5]]  

B = [R0_set[1]; R0_set[2]; R0_set[3]; R0_set[4]; R0_set[5]]

F_vector_5 = A \ B
    F_vector = hcat(F_vector_0, F_vector_1, F_vector_2, F_vector_3, F_vector_4, F_vector_5)
    
#Calculate marginal reward metric for each state 1,2,3,4,5 and threshold 0,1,2,3,4,5 

    marginal_F_vector = zeros(5, 6)

for i in 1:5
    for j in 0:5
        f_ij = R1_set[i] + beta * (P1[i,1] * F_vector[1,j+1] + P1[i,2] * F_vector[2,j+1] +
            P1[i,3] * F_vector[3,j+1] + P1[i,4] * F_vector[4,j+1] + P1[i,5] * 
            F_vector[5,j+1]) - R0_set[i] - beta * (P0[i,1] * F_vector[1,j+1] +
            P0[i,2] * F_vector[2,j+1] + P0[i,3] * F_vector[3,j+1] + P0[i,4] *
            F_vector[4,j+1] + P0[i,5] * F_vector[5,j+1])
        marginal_F_vector[i, j+1] = f_ij
    end
end

# Display the result matrix

# for i = 1:5
#    println(marginal_F_vector[i, :])
# end

#marginal productivity metric
M1 = marginal_G_vector[1,2] \ marginal_F_vector[1,2] #x=1 z=1
M2 = marginal_G_vector[2,3] \ marginal_F_vector[2,3] #x=2 z=2
M3 = marginal_G_vector[3,4] \ marginal_F_vector[3,4] #x=3 z=3
M4 = marginal_G_vector[4,5] \ marginal_F_vector[4,5] #x=4 z=4
M5 = marginal_G_vector[5,6] \ marginal_F_vector[5,6] #x=5 z=5

MPI_index = (M1, M2, M3, M4, M5, R1_set)

    
    if M1 < M2 < M3 < M4 < M5
    println("Pass 2nd check")
else println("Whittle index no exist")
end
    return MPI_index
    
end

% We can get the Whittle index value for each state M1; M2; M3; M4; M5
